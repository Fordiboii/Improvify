package tdt4140.gr1817.ecosystem.persistence.repositories.mysql.util;

import lombok.extern.slf4j.Slf4j;
import org.hsqldb.jdbcDriver;
import org.hsqldb.server.Server;
import org.junit.rules.ExternalResource;

import java.io.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.StringJoiner;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * Starts an in-memory {@link Server}.
 */
@Slf4j
public class HsqldbRule extends ExternalResource {

    private Server server;
    private boolean logStatements = false;

    static {
        try {
            DriverManager.registerDriver(jdbcDriver.driverInstance);
        } catch (SQLException e) {
            throw new RuntimeException("Unable to load HSQLDB driver", e);
        }
    }

    @Override
    protected void before() throws Throwable {
        server = new Server();
        if (!logStatements) {
            server.setLogWriter(new PrintWriter(new OutputStream() {
                @Override
                public void write(int b) throws IOException {
                    // no-op
                }
            }));
        }
        server.setTrace(logStatements);

        server.setAddress("localhost");
        server.setPort(1234);
        server.setDatabaseName(0, "ecosystem");
        server.setDatabasePath(0, "mem:ecosystem"); // in-memory database
        server.start();

        loadSchema();
    }

    private String readSchemaSql() {
        final String sqlFile = "/mainDB create ecosystem.sql";
//        final String sqlFile = "/mainDB create ecosystem.hsqldb.sql";
        try (
                BufferedReader reader = new BufferedReader(new InputStreamReader(getClass().getResourceAsStream(sqlFile)));
        ) {
            Stream<String> lineStream = reader.lines();
            lineStream = convertMysqlToHsqlSchema(lineStream);
            final List<String> lines = lineStream
                    .collect(Collectors.toList());

            final StringJoiner joiner = new StringJoiner("\n");
            for (final String line : lines) {
                joiner.add(line);
            }

            return joiner.toString();
        } catch (Exception ex) {
            throw new RuntimeException("Unable to load SQL", ex);
        }

    }

    private Stream<String> convertMysqlToHsqlSchema(Stream<String> sqlStream) {
        return sqlStream
                .map(String::trim)
                .filter(line -> !(line.startsWith("SET ")
                        || line.isEmpty()
                        || line.startsWith("-- ")
                        || line.startsWith("DROP SCHEMA")
                        || line.startsWith("CREATE SCHEMA")
                        || line.startsWith("USE ")
                        || "ENGINE = InnoDB".equals(line)
                        || line.startsWith("INDEX "))
                )
                .map(line -> {
                    if ("ENGINE = InnoDB;".equals(line)) {
                        return ";";
                    }
                      /*  if (line.matches("^COMMENT = '.*';$")) {
                            return ";";
                        }
                        if (line.matches("^COMMENT = '.*'$")) {
                            return "";
                        }*/
                    return line
                            .replace("`", "")
                            //.replace("IF NOT EXISTS", "")
//                            .replace("INT", "INTEGER") // bugs with CONSTRAINT
                            .replace("AUTO_INCREMENT", "GENERATED BY DEFAULT AS IDENTITY")
                            .replace("TINYINT(1)", "BOOLEAN")
                            .replace("TEXT", "LONGVARCHAR")
                            .replace("TIMESTAMP NOT NULL DEFAULT NOW()", "TIMESTAMP DEFAULT CURRENT_TIMESTAMP")
                            .replace("BOOLEAN NOT NULL DEFAULT 0", "BOOLEAN DEFAULT FALSE")
                            .replaceAll("FLOAT\\(\\d+,\\d+\\)", "FLOAT")
                            .replaceAll("COMMENT (= )*'[^']*'", "");
                });
    }

    private void loadSchema() {
        try (
                Connection connection = getConnection();
                Statement statement = connection.createStatement()
        ) {
            final String sql = readSchemaSql();
            final String[] statements = sql.split(";");
            for (String statementSql : statements) {
//                System.out.println("Executing statement: " + statementSql);
                statement.execute(statementSql);
            }
        } catch (Exception ex) {
            throw new RuntimeException("Unable to update schema", ex);
        }

    }

    @Override
    protected void after() {
        /*try (Connection connection = getConnection()) {
            connection.createStatement().execute("TRUNCATE SCHEMA ecosystem RESTART IDENTITY AND COMMIT NO CHECK");
        } catch (Exception ex) {
            throw new RuntimeException("Unable to empty db", ex);
        }*/

        server.shutdown();
    }

    public Connection getConnection() {
        final String HSQLDB_DEFAULT_USER = "SA";
        try {
            return DriverManager.getConnection("jdbc:hsqldb:hsql://localhost:1234/ecosystem", HSQLDB_DEFAULT_USER, "");
        } catch (SQLException e) {
            throw new RuntimeException("Unable to get HSQLDB connection", e);
        }
    }
}
